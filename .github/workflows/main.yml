name: Remote MacOS Runner

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  remote-access:
    runs-on: macos-latest
    timeout-minutes: 360  # Максимальное время выполнения: 6 часов

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Homebrew (if not installed)
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          # Добавляем Homebrew в PATH
          if [[ "$(uname -m)" == "x86_64" ]]; then
            echo "/usr/local/bin" >> $GITHUB_PATH
            echo "/usr/local/sbin" >> $GITHUB_PATH
          elif [[ "$(uname -m)" == "arm64" ]]; then
            echo "/opt/homebrew/bin" >> $GITHUB_PATH
            echo "/opt/homebrew/sbin" >> $GITHUB_PATH
          fi

      - name: Download ngrok for macOS
        run: |
          ARCH=$(uname -m)
          if [ "$ARCH" = "arm64" ]; then
            NGROK_URL="https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-darwin-arm64.zip"
          else
            NGROK_URL="https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-darwin-amd64.zip"
          fi
          curl -L $NGROK_URL -o ngrok.zip
          unzip ngrok.zip
          chmod +x ngrok
          # Перемещаем ngrok в соответствующий каталог
          if [ "$ARCH" = "arm64" ]; then
            sudo mv ngrok /opt/homebrew/bin/ngrok
          else
            sudo mv ngrok /usr/local/bin/ngrok
          fi

      - name: Authenticate ngrok
        run: ngrok config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }}

      - name: Install RustDesk
        run: brew install --cask rustdesk

      - name: Configure RustDesk
        run: |
          mkdir -p ~/rustdesk
          cat <<EOF > ~/rustdesk/hbbs.conf
[hbbs]
listen_addr = "0.0.0.0:21115"
relay_addr = "0.0.0.0:21116"
EOF

          cat <<EOF > ~/rustdesk/hbbr.conf
[hbbr]
listen_addr = "0.0.0.0:21116"
EOF

      - name: Start RustDesk Server
        run: |
          hbbs -c ~/rustdesk/hbbs.conf &
          hbbr -c ~/rustdesk/hbbr.conf &
          sleep 10  # Ждём немного больше для инициализации серверов

      - name: Check open ports
        run: |
          lsof -i :21115
          lsof -i :21116

      - name: Create ngrok config file
        run: |
          cat <<EOF > ngrok.yml
version: "3"
tunnels:
  server_tunnel:
    proto: tcp
    addr: 21115
  relay_tunnel:
    proto: tcp
    addr: 21116
EOF
          
          # Для отладки: выведите содержимое ngrok.yml
          cat ngrok.yml

      - name: Start ngrok with config
        run: |
          ngrok start --all --config=ngrok.yml > ngrok.log &
          sleep 20  # Ждём для инициализации туннелей

      - name: Install jq
        run: brew install jq

      - name: Check ngrok API availability
        run: |
          for i in {1..10}; do
            # Проверяем доступность API на порту 4040 и 4041
            if curl -s http://localhost:4040/api/tunnels > /dev/null; then
              echo "ngrok API доступно на порту 4040."
              echo "NGROK_API_PORT=4040" >> $GITHUB_ENV
              break
            elif curl -s http://localhost:4041/api/tunnels > /dev/null; then
              echo "ngrok API доступно на порту 4041."
              echo "NGROK_API_PORT=4041" >> $GITHUB_ENV
              break
            fi
            echo "Ждём доступности ngrok API..."
            sleep 2
          done

          # Проверяем, установлена ли переменная NGROK_API_PORT
          if [[ -z "${{ env.NGROK_API_PORT }}" ]]; then
            echo "Ошибка: ngrok API недоступно на портах 4040 и 4041."
            cat ngrok.log
            exit 1
          fi

      - name: Get ngrok public URLs
        run: |
          get_public_url() {
            NAME=$1
            PORT=$2
            URL=$(curl -s http://localhost:$PORT/api/tunnels | jq -r ".tunnels[] | select(.name == \"$NAME\") | .public_url")
            echo "$URL"
          }

          PUBLIC_URL1=$(get_public_url "server_tunnel" ${{ env.NGROK_API_PORT }})
          PUBLIC_URL2=$(get_public_url "relay_tunnel" ${{ env.NGROK_API_PORT }})

          # Отладочная информация
          echo "DEBUG: PUBLIC_URL1=$PUBLIC_URL1"
          echo "DEBUG: PUBLIC_URL2=$PUBLIC_URL2"

          # Установка переменных окружения
          echo "RustDesk_Server_Address=$PUBLIC_URL1" >> $GITHUB_ENV
          echo "RustDesk_Relay_Address=$PUBLIC_URL2" >> $GITHUB_ENV

      - name: Check ngrok tunnels
        run: |
          if [[ -z "${{ env.RustDesk_Server_Address }}" || -z "${{ env.RustDesk_Relay_Address }}" ]]; then
            echo "Ошибка: Не удалось получить публичные URL для туннелей ngrok."
            echo "Лог туннеля:"
            cat ngrok.log
            echo "Ответ ngrok API:"
            curl -s http://localhost:${{ env.NGROK_API_PORT }}/api/tunnels | jq .
            exit 1
          fi

      - name: Save ngrok logs as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ngrok-logs
          path: |
            ngrok.log

      - name: Save connection info as artifacts
        run: |
          echo "Server: ${{ env.RustDesk_Server_Address }}" > connection_info.txt
          echo "Relay: ${{ env.RustDesk_Relay_Address }}" >> connection_info.txt

      - uses: actions/upload-artifact@v3
        with:
          name: connection-info
          path: connection_info.txt

      - name: Display connection information
        run: |
          echo "RustDesk Server Address: ${{ env.RustDesk_Server_Address }}"
          echo "RustDesk Relay Address: ${{ env.RustDesk_Relay_Address }}"

      - name: Wait to keep runner active
        run: sleep 21600  # 6 часов в секундах
