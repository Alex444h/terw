name: Remote MacOS Runner

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  remote-access:
    runs-on: macos-latest
    timeout-minutes: 360  # Максимальное время выполнения: 6 часов

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Установить Homebrew (если не установлен)
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          # Определяем архитектуру и устанавливаем соответствующие пути
          if [[ "$(uname -m)" == "x86_64" ]]; then
            echo "/usr/local/bin" >> $GITHUB_PATH
            echo "/usr/local/sbin" >> $GITHUB_PATH
          elif [[ "$(uname -m)" == "arm64" ]]; then
            echo "/opt/homebrew/bin" >> $GITHUB_PATH
            echo "/opt/homebrew/sbin" >> $GITHUB_PATH
          fi

      - name: Скачивание ngrok для macOS
        run: |
          # Определяем архитектуру для правильной загрузки ngrok
          ARCH=$(uname -m)
          if [ "$ARCH" = "arm64" ]; then
            NGROK_URL="https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-darwin-arm64.zip"
          else
            NGROK_URL="https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-darwin-amd64.zip"
          fi
          curl -L $NGROK_URL -o ngrok.zip
          unzip ngrok.zip
          chmod +x ngrok
          # Перемещаем ngrok в соответствующий каталог
          if [ "$ARCH" = "arm64" ]; then
            sudo mv ngrok /opt/homebrew/bin/ngrok
          else
            sudo mv ngrok /usr/local/bin/ngrok
          fi

      - name: Аутентификация ngrok
        run: ngrok config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }}

      - name: Установка RustDesk
        run: brew install --cask rustdesk

      - name: Настройка RustDesk
        run: |
          # Создаем конфигурационный файл для RustDesk
          mkdir -p ~/rustdesk
          cat <<EOL > ~/rustdesk/hbbs.conf
          [hbbs]
          listen_addr = "0.0.0.0:21115"
          relay_addr = "0.0.0.0:21116"
          EOL

          cat <<EOL > ~/rustdesk/hbbr.conf
          [hbbr]
          listen_addr = "0.0.0.0:21116"
          EOL

      - name: Запуск RustDesk сервера
        run: |
          hbbs -c ~/rustdesk/hbbs.conf &
          hbbr -c ~/rustdesk/hbbr.conf &
          sleep 10  # Ждём немного больше для инициализации серверов

      - name: Создание ngrok туннелей для RustDesk
        run: |
          ngrok tcp 21115 --log=stdout > ngrok21115.log &
          ngrok tcp 21116 --log=stdout > ngrok21116.log &
          sleep 20  # Ждём больше времени для установления туннелей

      - name: Установка jq
        run: brew install jq

      - name: Проверка доступности ngrok API
        run: |
          for i in {1..10}; do
            if curl -s http://localhost:4040/api/tunnels > /dev/null; then
              echo "ngrok API доступно."
              exit 0
            fi
            echo "Ждем доступности ngrok API..."
            sleep 2
          done
          echo "Ошибка: ngrok API недоступно."
          exit 1

      - name: Получение публичных URL-адресов ngrok
        run: |
          # Функция для получения публичного URL по порту
          get_public_url() {
            PORT=$1
            echo $(curl -s http://localhost:4040/api/tunnels | jq -r ".tunnels[] | select(.config.addr | contains(\":$PORT\")) | .public_url")
          }

          PUBLIC_URL1=$(get_public_url 21115)
          PUBLIC_URL2=$(get_public_url 21116)

          # Отладочная информация
          echo "DEBUG: PUBLIC_URL1=$PUBLIC_URL1"
          echo "DEBUG: PUBLIC_URL2=$PUBLIC_URL2"

          echo "RustDesk_Server_Address=$PUBLIC_URL1" >> $GITHUB_ENV
          echo "RustDesk_Relay_Address=$PUBLIC_URL2" >> $GITHUB_ENV

      - name: Проверка ngrok туннелей
        run: |
          if [[ -z "${{ env.RustDesk_Server_Address }}" || -z "${{ env.RustDesk_Relay_Address }}" ]]; then
            echo "Ошибка: Не удалось получить публичные URL для туннелей ngrok."
            echo "Лог туннеля 21115:"
            cat ngrok21115.log
            echo "Лог туннеля 21116:"
            cat ngrok21116.log
            exit 1
          fi

      - name: Сохранение логов ngrok как артефакты
        uses: actions/upload-artifact@v3
        with:
          name: ngrok-logs
          path: |
            ngrok21115.log
            ngrok21116.log

      - name: Вывод информации для подключения
        run: |
          echo "RustDesk Server Address: ${{ env.RustDesk_Server_Address }}"
          echo "RustDesk Relay Address: ${{ env.RustDesk_Relay_Address }}"

      - name: Сохранение информации как артефакт
        run: |
          echo "Server: ${{ env.RustDesk_Server_Address }}" > connection_info.txt
          echo "Relay: ${{ env.RustDesk_Relay_Address }}" >> connection_info.txt

      - uses: actions/upload-artifact@v3
        with:
          name: connection-info
          path: connection_info.txt

      - name: Ожидание для поддержания активности runner-а
        run: sleep 21600  # 6 часов в секундах
